{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentary about the Pawn Language \u00b6 Welcome to the documentary about the Pawn programming language. This documentary covers the history, syntax, data structures, functions, libraries and practical examples of this language.","title":"Start"},{"location":"#documentary-about-the-pawn-language","text":"Welcome to the documentary about the Pawn programming language. This documentary covers the history, syntax, data structures, functions, libraries and practical examples of this language.","title":"Documentary about the Pawn Language"},{"location":"data_structures/","text":"Data Structures \u00b6 Pawn supports several types of data structures that make it easier to organize information. Arrays \u00b6 new array[10]; Matrices \u00b6 new matrix[3][3];","title":"Data Structures"},{"location":"data_structures/#data-structures","text":"Pawn supports several types of data structures that make it easier to organize information.","title":"Data Structures"},{"location":"data_structures/#arrays","text":"new array[10];","title":"Arrays"},{"location":"data_structures/#matrices","text":"new matrix[3][3];","title":"Matrices"},{"location":"examples/","text":"Exemplos Pr\u00e1ticos \u00b6 Simple Script Example \u00b6 public OnGameModeInit() { print(\"Hello, world!\"); return 1; } Example of Function with Parameters \u00b6 public Sum(a, b) { return a + b; }","title":"Examples"},{"location":"examples/#exemplos-praticos","text":"","title":"Exemplos Pr\u00e1ticos"},{"location":"examples/#simple-script-example","text":"public OnGameModeInit() { print(\"Hello, world!\"); return 1; }","title":"Simple Script Example"},{"location":"examples/#example-of-function-with-parameters","text":"public Sum(a, b) { return a + b; }","title":"Example of Function with Parameters"},{"location":"functions_libraries/","text":"Functions and Libraries \u00b6 Pawn has a rich standard library and allows you to create custom functions. Role Statement \u00b6 MyFunction() { // code } Function Calls \u00b6 MyFunction();","title":"Functions and Libraries"},{"location":"functions_libraries/#functions-and-libraries","text":"Pawn has a rich standard library and allows you to create custom functions.","title":"Functions and Libraries"},{"location":"functions_libraries/#role-statement","text":"MyFunction() { // code }","title":"Role Statement"},{"location":"functions_libraries/#function-calls","text":"MyFunction();","title":"Function Calls"},{"location":"introduction/","text":"Introduction \u00b6 Pawn is a lightweight scripting programming language, originally created by ITB CompuPhase. It is widely used in gaming environments, especially for multiplayer game servers. History \u00b6 The Pawn language began as an extension of a language called \"Small\" in 1998. Since then, it has evolved significantly and found its niche in game scripting due to its simplicity and effectiveness.","title":"Introduction"},{"location":"introduction/#introduction","text":"Pawn is a lightweight scripting programming language, originally created by ITB CompuPhase. It is widely used in gaming environments, especially for multiplayer game servers.","title":"Introduction"},{"location":"introduction/#history","text":"The Pawn language began as an extension of a language called \"Small\" in 1998. Since then, it has evolved significantly and found its niche in game scripting due to its simplicity and effectiveness.","title":"History"},{"location":"syntax/","text":"Syntax \u00b6 Pawn has a similar syntax to C, but is designed to be easier to use. Variables \u00b6 new variable = 5; Control Structures \u00b6 if (condition) { // code } else { // code } Loops \u00b6 for (new i = 0; i < 10; i++) { // code }","title":"Syntax"},{"location":"syntax/#syntax","text":"Pawn has a similar syntax to C, but is designed to be easier to use.","title":"Syntax"},{"location":"syntax/#variables","text":"new variable = 5;","title":"Variables"},{"location":"syntax/#control-structures","text":"if (condition) { // code } else { // code }","title":"Control Structures"},{"location":"syntax/#loops","text":"for (new i = 0; i < 10; i++) { // code }","title":"Loops"}]}